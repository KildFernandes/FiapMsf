'''import oracledb

# Configurações de conexão
username = 'system'  # Usuário do banco de dados
password = 'your_password'  # Substitua pela sua senha
dsn = 'localhost:1521/XEPDB1'  # DSN para conexão

def get_connection():
    try:
        connection = oracledb.connect(
            user=username,
            password=password,
            dsn=dsn
        )
        return connection
    except oracledb.Error as e:
        print(f"Erro ao conectar ao banco de dados: {e}")
        return None

def setup_database():
    connection = get_connection()
    if connection is None:
        return

    cursor = connection.cursor()
    tables = {
        'SAFRA': """
            CREATE TABLE safra (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                ano NUMBER NOT NULL
            )
        """,
        'CULTURA': """
            CREATE TABLE cultura (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(255) NOT NULL,
                tipo_cultura VARCHAR2(255) NOT NULL,
                estadio_fenologico VARCHAR2(255) NOT NULL,
                safra_id NUMBER NOT NULL,
                FOREIGN KEY (safra_id) REFERENCES safra(id)
            )
        """,
        'TALHAO': """
            CREATE TABLE talhao (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(255) NOT NULL,
                forma VARCHAR2(50) NOT NULL,
                comprimento FLOAT,
                largura FLOAT,
                base FLOAT,
                altura FLOAT,
                base_maior FLOAT,
                base_menor FLOAT,
                data DATE NOT NULL,
                cultura_id NUMBER NOT NULL,
                FOREIGN KEY (cultura_id) REFERENCES cultura(id)
            )
        """,
        'RUAS': """
            CREATE TABLE ruas (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(255) NOT NULL,
                comprimento FLOAT NOT NULL,
                largura FLOAT NOT NULL,
                talhao_id NUMBER NOT NULL,
                FOREIGN KEY (talhao_id) REFERENCES talhao(id)
            )
        """,
        'PRODUTOS': """
            CREATE TABLE produtos (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(255) NOT NULL,
            )
        """,
        'PRAGA': """
            CREATE TABLE praga (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(255) NOT NULL,
                estagio VARCHAR2(255) NOT NULL,
                nivel_infestacao VARCHAR2(50) NOT NULL,
                condicoes_climaticas VARCHAR2(255) NOT NULL,
            )
        """,
        'METODO_CONTROLE': """
            CREATE TABLE metodo_controle (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                metodo VARCHAR2(255) NOT NULL,
                periodo_ideal VARCHAR2(255),
                quantidade FLOAT NOT NULL,
                produto_recomendado NUMBER,
                FOREIGN KEY (produto_recomendado) REFERENCES produtos(id)
            )
        """,
        'DEFENSIVO': """
            CREATE TABLE defensivo (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                data DATE NOT NULL,
                praga_id NUMBER NOT NULL,
                metodo_controle_id NUMBER NOT NULL,
                talhao_id NUMBER,
                FOREIGN KEY (praga_id) REFERENCES praga(id),
                FOREIGN KEY (metodo_controle_id) REFERENCES metodo_controle(id),
                FOREIGN KEY (talhao_id) REFERENCES talhao(id)
            )
        """
    }

    for table_name, create_statement in tables.items():
        try:
            # Verificar se a tabela existe
            cursor.execute(f"""
                SELECT table_name FROM user_tables WHERE table_name = '{table_name}'
            """)
            result = cursor.fetchone()
            if result:
                print(f"Tabela '{table_name}' já existe.")
            else:
                # Criar a tabela
                cursor.execute(create_statement)
                print(f"Tabela '{table_name}' criada com sucesso.")
        except oracledb.Error as e:
            print(f"Erro ao verificar ou criar a tabela '{table_name}': {e}")

    cursor.execute("SELECT table_name FROM user_tables")
    tables = cursor.fetchall()
    print("Tabelas no esquema:")
    for table in tables:
        print(table[0])

    cursor.close()
    connection.close()
'''